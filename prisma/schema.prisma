// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String   @unique
  firstName String
  lastName  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  orders    Order[]
}

enum Role {
  ADMIN
  USER
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  image       String?
  price       Float
  stock       Int
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  orderItems  OrderItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  status     OrderStatus @default(PENDING)
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  payment    Payment?
  shipment   Shipment?
  orderItems OrderItem[]

  @@index([userId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  PAID
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float // Çmimi në kohën e porosisë

  @@index([productId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  method        PaymentMethod @default(STRIPE)
  amount        Float
  status        PaymentStatus
  transactionId String?
  createdAt     DateTime      @default(now())

  @@index([status])
}

enum PaymentMethod {
  STRIPE
}

enum PaymentStatus {
  INITIATED
  COMPLETED
  FAILED
}

model Shipment {
  id          Int            @id @default(autoincrement())
  order       Order          @relation(fields: [orderId], references: [id])
  orderId     Int            @unique
  address     String
  city        String
  zipCode     String
  status      ShipmentStatus
  shippedAt   DateTime?
  deliveredAt DateTime?

  @@index([status])
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  RETURNED
}
